set nocompatible              " be iMproved, required
filetype off                  " required

"===============================================================================
" set the runtime path to include Vundle and initialize
set shellslash
set rtp+=c:/Basics/Vim/Vundle/bundle\Vundle.vim"
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')
"
"-------------------------------------------------
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.

"-------------------------------------------------
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.

"-------------------------------------------------
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
Plugin 'ascenator/L9', {'name': 'newL9'}

"-------------------------------------------------
" plugin SimpylFold
Plugin 'tmhedberg/SimpylFold'

"-------------------------------------------------
" Syntax checking
Plugin 'vim-syntastic/syntastic'

"-------------------------------------------------
" nvie/vim-flake8
Plugin 'nvie/vim-flake8'
" <F7> syntax check

"-------------------------------------------------
" NERDTree
Plugin 'scrooloose/nerdtree'

"-------------------------------------------------
" YCM
" Plugin 'Valloric/YouCompleteMe'

"-------------------------------------------------
" vim-LSP(Language Server Protocao)
Plugin 'prabirshrestha/vim-lsp'
" aoto configuration for Language Servers for vim-lsp
Plugin 'mattn/vim-lsp-settings'

" auto-completion"
Plugin 'prabirshrestha/asyncomplete.vim'
Plugin 'prabirshrestha/asyncomplete-lsp.vim'
Plugin 'keremc/asyncomplete-racer.vim'

" rust.vim
Plugin 'rust-lang/rust.vim'

"-------------------------------------------------
" vim-auto-popmenu
Plugin 'skywind3000/vim-auto-popmenu'

"-------------------------------------------------
" tagbar
Plugin 'majutsushi/tagbar'

"-------------------------------------------------
" Split window resize
Plugin 'simeji/winresizer'

"-------------------------------------------------
" Vim Calendar(Google Calendar and Google Task)
Plugin 'itchyny/calendar.vim'

"-------------------------------------------------
" VimWiki, some kinds of personal diary
Plugin 'vimwiki/vimwiki'

"-------------------------------------------------
" Vim with Markdown and Preview
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'kannokanno/previm'
Plugin 'tyru/open-browser.vim'

"-------------------------------------------------
" airline
Plugin 'vim-airline/vim-airline'
" airline-themes
Plugin 'vim-airline/vim-airline-themes'

"-------------------------------------------------
" color scheme: Nord-vim
Plugin 'arcticicestudio/nord-vim'

" color scheme: challenger-deep
Plugin 'challenger-deep-theme/vim'

"-------------------------------------------------
" vim-rainbow
Plugin 'luochen1990/rainbow'

" All of your Plugins must be added before the following line
"===============================================================================
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" The following will be basic settings for vim
"===============================================================================

" Vim with all enhancements
source $VIMRUNTIME/vimrc_example.vim

" Use the internal diff if available.
" Otherwise use the special 'diffexpr' for Windows.
if &diffopt !~# 'internal'
  set diffexpr=MyDiff()
endif
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg1 = substitute(arg1, '!', '\!', 'g')
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg2 = substitute(arg2, '!', '\!', 'g')
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let arg3 = substitute(arg3, '!', '\!', 'g')
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  let cmd = substitute(cmd, '!', '\!', 'g')
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

"-------------------------------------------------
" UTF-8 Support
set encoding=utf-8

syntax on
filetype plugin on
set nocompatible
set tabstop=2
set shiftwidth=2
set expandtab
set ai
set number
set relativenumber
set printoptions=number:y
" set hlsearch
set incsearch
set ruler
" set cursorcolumn
" set cursorline
set termguicolors  "True Color
" colorscheme evening
" colorscheme nord
colorscheme challenger_deep
set belloff=all  "disable error bells
set guioptions-=m  "hide menu bar
set guioptions-=T  "toolbar
set guioptions-=r  "scrollbar
set guioptions-=L  "leftside scrollbar
" set guifont=Cascadia_Code_SemiLight:h11,Cascadia_Mono_SemiLight:h11,Consolas:h11
set guifont=CodeNewRoman_Nerd_Font:h12,Cascadia_Code_PL:h11
set splitbelow
set splitright
set list listchars=tab:»·,trail:·,nbsp:·  " Display extra whitespace
set noundofile  " Stop creating the undofile-backup files
set backupdir=d:/WLB/Vim/~/backup//,.

" run shell command on PowerShell
" set shell=powershell
" set shellcmdflag=-commanl


" Mapping
"-------------------------------------------------
:let mapleader= "\<Space>"

" Fast reloading of the .vimrl
map  <Leader>rl :source c:/Basics/Vim/_vimrc<cr>
" Fast editing of .vimrc
map  <Leader>ee :e d:/WLB/Vim/vim_toolbox/dotfiles/config/_vimrc<cr>

" New tab
noremap <Leader>tn :tabnew<cr>

" remap for split shifting
noremap <C-H> <C-W><C-H>
noremap <C-J> <C-W><C-J>
noremap <C-K> <C-W><C-K>
noremap <C-L> <C-W><C-L>

" remap print for gvim
noremap <Leader>print :hardcopy<cr>

" remap save for vim
noremap <Leader>s :w<cr>

" count number of words and digits
noremap <Leader>cnt :%s/[\u4EOO-\u9FCC0-9]/&/g<cr>

" Indententaion
"-------------------------------------------------
" au BUfNewFile,BufRead *.py
"   \ set tabstop=4
"   \ set softtabstop=4
"   \ set shiftwidth=4
"   \ set textwidth=79
"   \ set expandtab
"   \ set autoindent
"   \ set fileformat=unix

" au BufNewFile,BufRead *.js, *.html, *.css
"   \ set tabstop=2
"   \ set softtabstop=2
"   \ set shiftwidth=2


" Highlight/color theme
"-------------------------------------------------
if (match(colors_name, 'challenger_deep') != -1)
  highlight Normal guibg=#1e1c31
  highlight Comment gui=NONE
  let g:airline_theme='challenger_deep'
elseif (match(colors_name, 'evening') != -1)
  highlight Normal guibg=#343236
  highlight LineNr guifg=#aabfbd
  highlight Comment guifg=#519953 gui=NONE
  let g:airline_theme='fruit_punch'
elseif (match(colors_name, 'nord') != -1)
  highlight Comment gui=NONE
  let g:airline_theme='nord'
endif

" Special color for my own special comment
au! BufEnter *.py syn match specialComment0 /# liu>>>.*/  " Python files (*.py)
highlight specialComment0 guifg=#ffbf11

" Special color for FAIL
au! BufEnter *.wiki syn match specialComment1 /FAIL/  "Vimwiki files (*.wiki)
highlight specialComment1 guifg=#ff0000 guibg=#ffff00

" Special color for PRIORITY
au! BufEnter *.wiki syn match specialComment2 /PRIO/  "Vimwiki files (*.wiki)
highlight specialComment2 guifg=#144ca6 guibg=#d786ee

" syntax highlight for python self
:syn keyword pythonBuiltin self

" Search highlight
highlight Search term=bold,reverse ctermfg=0 ctermbg=14 gui=bold guifg=Black guibg=Magenta


"-------------------------------------------------
" Setting for auto-complete of trentheses
inoremap ` ``<ESC>i
inoremap ' ''<ESC>i
inoremap " ""<ESC>i
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap { {}<ESC>i
" inoremap { {<cr>}<ESC>ko<tab>
inoremap {<cr> {<cr>}<ESC>ko
inoremap <> <><ESC>i
" Show matching sets of parentheses
:set showmatch

" Enable folding
set foldmethod=indent
set foldlevel=99
" Enable folding/unfolding with the spacebar instead of <za>
nnoremap <Leader> za


"-------------------------------------------------
" Setting for Rust
" autocmd FileType rust inoremap /* /*<cr><ESC>i*/<ESC>
" autocmd FileType rust inoremap /* /**/<ESC>hi<cr>
autocmd FileType rust inoremap /* /*<cr><ESC>xxi*/<ESC>


"-------------------------------------------------
" Setting for Python
autocmd BufNewFile *.py exec ":call SetTitle()"
func SetTitle()
  if &filetype == "python"
     call setline(1, "#!/usr/bin/env python")
     call setline(2, "# -* - coding: UTF-8 -* -")
     call setline(3, "#Filename:")
  endif
endfunc

let g:python_highlight_all = 1


" Plugin
"===============================================================================
" SimpplFold
"-------------------------------------------------
let g:SimpylFold_docstring_preview=1


" Syntax checking
"-------------------------------------------------
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
let g:syntastic_always_populate_loc_list=0
let g:syntastic_auto_loc_list=0
let g:syntastic_check_on_open=0
let g:syntastic_check_on_wq=0
let g:syntastic_python_checkers=['flake8']


" NERDTree
"-------------------------------------------------
autocmd vimenter * NERDTree    " Load NERDTree automatically when vim starts up
autocmd bufenter * if (winnr("$")==1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" let g:NERDTreeShowHidden=1
let g:NERDTreeShowBookmarks = 1
" Open NERDTRee
noremap <Leader>tree :NERDTree<cr>


" YCM
"-------------------------------------------------
" let g:ycm_keep_logfiles=1
" let g:ycm_log_level='debug'


" tagbar
"-------------------------------------------------
" let g:tagbar_ctags_bin = 'C:\Users\liuye\vimfiles\ctags-2019-07-25_1a94658c-x64.debug\ctags.exe'
" let g:tagbar_ctags_bin = 'C:\Basics\Vim\vimfiles\plugin\ctags58\ctags.exe'
let g:tagbar_ctags_bin = 'C:\Basics\Vim\vimfiles\plugin\ctags-2022-07-25_p5_x64\ctags.exe'
noremap <F8> :TagbarToggle<CR>

" for RUST
let g:rust_use_custom_ctags_defs = 1  " if using rust.vim
let g:tagbar_type_rust = {
  \ 'ctagsbin' : 'C:\Basics\Vim\vimfiles\plugin\ctags-2022-07-25_p5_x64\ctags.exe',
  \ 'ctagstype' : 'rust',
  \ 'kinds' : [
      \ 'n:modules',
      \ 's:structures:1',
      \ 'i:interfaces',
      \ 'c:implementations',
      \ 'f:functions:1',
      \ 'g:enumerations:1',
      \ 't:type aliases:1:0',
      \ 'v:constants:1:0',
      \ 'M:macros:1',
      \ 'm:fields:1:0',
      \ 'e:enum variants:1:0',
      \ 'P:methods:1',
  \ ],
  \ 'sro': '::',
  \ 'kind2scope' : {
      \ 'n': 'module',
      \ 's': 'struct',
      \ 'i': 'interface',
      \ 'c': 'implementation',
      \ 'f': 'function',
      \ 'g': 'enum',
      \ 't': 'typedef',
      \ 'v': 'variable',
      \ 'M': 'macro',
      \ 'm': 'field',
      \ 'e': 'enumerator',
      \ 'P': 'method',
  \ },
\ }


" Split window resize
"-------------------------------------------------
" The key used to start winresizer
let g:winresizer_start_key='<C-a>'  " <C-a>: Original function to get number ++
" Finish with <Esc> if this value is 1
let g:winresizer_finish_with_escape=1
" The width to add or subtract when the `left` or `right` key is pressed
let g:winresizer_vert_resize=1
" The height to add or subtract when the `up` or `down` key is pressed
let g:winresizer_horiz_resize=1


" colorscheme
"-------------------------------------------------
" leg g:challenger_deep_termcolors


" airline
"-------------------------------------------------
" let g:airline_theme='fruit_punch'
" let g:airline_theme='challenger_deep'


" Vim Calendar(Google Calendar and Google Task)
"-------------------------------------------------
" View and edit calendar on Google Calendar, or task on Google Task
let g:calendar_google_calendar = 1
let g:calendar_google_task = 1
" so c:\Users\liuye\.cache\calendar.vim\credentials.vim
" Open calendar.vim clock
noremap <Leader>time :Calendar -view=clock<cr>


" VimWiki, a sort of personal diary
"-------------------------------------------------
" open/write today's dairy
" <Leader>w<Leader>w
" generate dairy index
" <Leader>w<Leader>i
let g:vimwiki_folding = 'expr'

" List and select available wikis.
" <Leader>ws
" Define wiki options
let wiki_1 = {}
let wiki_1.name = 'My_Wiki'
let wiki_1.path = 'D:/WLB/Vim/vim_toolbox/My_vimwiki/vimwiki'
" let wiki_1.html_template = '~/public_html/template.tpl'
let wiki_1.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'r': 'R', 'rust': 'rs'}
let wiki_1.auto_toc = 1
let wiki_1.auto_diary_index = 1

let wiki_2 = {}
let wiki_2.name = 'My_PD'
let wiki_2.path = 'D:/WLB/Vim/vim_toolbox/My_vimwiki/PersonalDev'
let wiki_2.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'r': 'R', 'rust': 'rs'}
let wiki_2.auto_toc = 1

let g:vimwiki_list = [wiki_1, wiki_2]
let automatic_nested_syntaxes = 1
let g:vimwiki_toc_link_format = 1
let g:vimwiki_list_ignore_newline = 0

" restrict Vimwiki's operation to only those paths listed in g:vimwiki_list.
" other text files wouldn't be treated as wiki pages.
let g:vimwiki_global_ext = 0

" Tips key mapping
" <Leader>wt
"   Open index file of the [count]'s wiki in a new tab.
" <Leader>ws
"   List and select available wikis.
" [count]<Leader>wi
"   Open diary index file of the [count]'s wiki.
" [count]<Leader>w<Leader>w
"   Open diary wiki-file for today of the [count]'s wiki.
" <Leader>wh         n    Convert current wiki page to HTML.
" <Leader>wh         n    Convert current wiki page to HTML.
" <Leader>wh         n    Convert current wiki page to HTML.
" <C-Space>         n     Toggle checkbox of a list item on/off.
" :VimwikiTable*
"   Create a table with 5 cols and 2 rows.
" :VimwikiTOC*
"   Create or update the Table of Contents for the current wiki file.


" vim-rainbow
"-------------------------------------------------
" au FileType c,cpp,objc,objcpp,python,r call rainbow#load()
" enable this plugin globally
let g:rainbow_active = 1
" :RainbowToggle  --toggle this plugin
" :RainbowLoad    --load/reload this plugin


" Vim with Markdown and Preview
"-------------------------------------------------
" markdown {{{
  autocmd BUfRead,BufNewFile *.mkd set filetype=markdown
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  " Need: kannokanno/previm
  nnoremap <C-p> :PrevimOpen<CR> " Ctrl-p open previm
  " not fold up automatically
  let g:vim_markdown_folding_disable=1
  let g:previm_enable_realtime=1
" }}}


" LSP
"-------------------------------------------------
" :LspInstallServer
" LSP server download directory [%LOCALAPPDATA%\vim-lsp-settings\servers]
" Auto-complete
" Automatically show the autocomplete popup menu
let g:asyncomplete_auto_popup = 1  " disable auto popup: 0
" Minimum consecutive chars to trigger auto-popup.
let g:asyncomplete_min_chars = 2

" Tab completion(firstly, make auto popup disable)
" function! s:check_back_space() abort
"     let col = col('.') - 1
"     return !col || getline('.')[col - 1]  =~ '\s'
" endfunction
"
" inoremap <silent><expr> <TAB>
"   \ pumvisible() ? '\<C-n>' :
"   \ <SID>check_back_space() ? '\<TAB>' :
"   \ asyncomplete#force_refresh()
" inoremap <expr><S-TAB> pumvisible() ? '\<C-p>' : '\<C-h>'

" Preview Window
" allow modifying the completeopt variable, or it will
" be overridden all the time
let g:asyncomplete_auto_completeopt = 1
set completeopt=menuone,noinsert,noselect,preview
" auto close preview window when completion is done.
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" show diagnostics message within status line
let g:lsp_diagnostics_enabled = 0
let g:lsp_diagnostics_echo_cursor = 0

" Python language server
if executable('pyls')
    "pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'allowlist': ['python'],
        \ })
endif
